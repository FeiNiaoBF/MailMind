"""
Test package for MailMind backend.
"""
import os
import sys

# 添加项目根目录到 Python 路径
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

"""
测试包
包含所有测试用例和测试工具

测试标准:
1. 文件命名规范:
   - 测试文件必须以 test_ 开头
   - 文件名应该清晰表明测试内容

2. 测试类规范:
   - 测试类必须以 Test 开头
   - 类名应该清晰表明测试范围
   - 每个测试类应该专注于一个功能模块

3. 测试方法规范:
   - 测试方法必须以 test_ 开头
   - 方法名应该清晰表明测试内容
   - 每个测试方法应该只测试一个功能点

4. 测试文档规范:
   - 每个测试类必须有文档字符串，说明测试范围
   - 每个测试方法必须有文档字符串，包含:
     * 前置条件
     * 执行步骤
     * 验证结果

5. 测试用例组织:
   - 使用 pytest.fixture 管理测试资源
   - 每个测试用例应该是独立的
   - 测试用例之间不应该有依赖关系

6. 测试数据管理:
   - 使用测试数据工厂或 fixture 生成测试数据
   - 避免在测试代码中硬编码测试数据
   - 使用随机数据生成工具避免数据冲突

7. 测试隔离:
   - 每个测试用例执行前应该清理测试环境
   - 使用事务回滚或数据库清理确保数据隔离
   - 避免测试用例之间的状态共享

8. 错误处理:
   - 测试异常情况
   - 验证错误消息和状态码
   - 确保错误处理符合预期

9. 性能考虑:
   - 避免不必要的数据库查询
   - 使用适当的索引优化查询性能
   - 合理使用缓存和模拟对象

10. 代码风格:
    - 遵循 PEP 8 规范
    - 使用有意义的变量名
    - 保持代码简洁清晰
"""
